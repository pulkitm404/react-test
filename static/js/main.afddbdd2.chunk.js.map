{"version":3,"sources":["components/headerComponents/header.js","components/footerComponents/footer.js","components/pages/homePage.js","components/pages/Products.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","to","Footer","Homepage","Products","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAkCeA,MA1Bf,WACI,OACA,gCACI,yBAAKC,UAAU,QAAf,OACQ,0BAAMC,GAAG,SAAT,aAER,6BACA,4BACI,wBAAID,UAAU,SACd,kBAAC,IAAD,CAAME,GAAG,KAAT,SAEA,4BACI,kBAAC,IAAD,CAAMA,GAAG,aAAT,cAEJ,4BACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,SAEA,wBAAIF,UAAU,QACd,kBAAC,IAAD,CAAME,GAAG,aAAT,cCdGC,MARf,WACI,OACA,2CCaWC,MAff,WACI,OACA,yBAAKJ,UAAU,mBACX,yBAAKA,UAAU,aACf,iKAKR,yBAAKA,UAAU,eCDAK,MARf,WACI,OACA,yBAAKL,UAAU,mBAAf,qB,eCqBWM,MAbf,WACI,OACA,kBAAC,IAAD,KACA,yBAAKN,UAAY,OACb,kBAAC,EAAD,MACI,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,YAAYC,UAAWJ,IAC7C,kBAAC,EAAD,SCTYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAE,EAAF,MAAYC,SAASC,eAAe,SD6H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.afddbdd2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport {\r\n    Link\r\n} from 'react-router-dom';\r\n\r\n\r\n\r\nfunction Header() {\r\n    return ( \r\n    <header>\r\n        <div className=\"logo\">\r\n            SAIF<span id=\"logod\">Partners</span>\r\n        </div>\r\n        <nav>\r\n        <ul>\r\n            <li className=\"first\">\r\n            <Link to=\"/\">HOME</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/Products\">PORTFOLIO</Link>\r\n            </li>\r\n            <li>\r\n            <Link to=\"/Contacts\">TEAM</Link>\r\n            </li>\r\n            <li className=\"last\">\r\n            <Link to=\"/Contacts\">ABOUT</Link>\r\n            </li>\r\n        </ul>\r\n        </nav>\r\n    </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\n\r\nfunction Footer() {\r\n    return ( \r\n    <footer>\r\n        Footer\r\n    </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\n\r\n\r\nfunction Homepage() {\r\n    return ( \r\n    <div className=\"container-fluid\">\r\n        <div className=\"parallax\"></div>\r\n        <div>\r\nThis div is just here to enable scrolling.\r\nTip: Try to remove the background-attachment property to remove the scrolling effect.\r\n</div>\r\n\r\n<div className=\"parallax\"></div>\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Homepage;","import React from 'react';\r\n\r\n\r\n\r\nfunction Products() {\r\n    return ( \r\n    <div className=\"container-fluid\">\r\n        Products Content\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Products;","import React from 'react';\nimport Header from './components/headerComponents/header'\nimport Footer from './components/footerComponents/footer'\nimport Homepage from './components/pages/homePage'\nimport Products from './components/pages/Products'\nimport './mycss.css';\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link\n} from 'react-router-dom';\n\n\nfunction App() {\n    return (\n    <Router> \n    <div className = \"App\" >\n        <Header/>\n            <Route exact path=\"/\" component={Homepage}/>\n            <Route exact path=\"/Products\" component={Products}/>\n        <Footer/>\n    </div>\n    </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}